name: Check and Create PR CODEOWNERS

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  copy_codeowners:
    runs-on: ubuntu-latest

    steps:
      - name: Check and copy CODEOWNERS
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.TOKEN1}}
          script: |
            const org = context.repo.owner;
            const sourceRepo = '.github';

            async function fetchContent(path) {
              try {
                const content = await github.repos.getContent({
                  owner: org,
                  repo: sourceRepo,
                  path: path,
                });
                return Buffer.from(content.data.content, 'base64').toString();
              } catch (error) {
                console.log(`Cannot find ${path} in ${sourceRepo}`);
                return null;
              }
            }

            async function checkExistingPulls(repo, branchName) {
              const existingPulls = await github.pulls.list({
                owner: org,
                repo: repo.name,
                head: `${org}:${branchName}`
              });
              return existingPulls.data.length > 0;
            }

            async function getDefaultBranch(repo) {
              const { data: { default_branch } } = await github.repos.get({
                owner: org,
                repo: repo.name,
              });
              return default_branch;
            }

            async function createNewBranch(repo, default_branch, branchName) {
              const { data: ref } = await github.git.getRef({
                owner: org,
                repo: repo.name,
                ref: `heads/${default_branch}`,
              });

              await github.git.createRef({
                owner: org,
                repo: repo.name,
                ref: `refs/heads/${branchName}`,
                sha: ref.object.sha,
              });
            }

            async function createFileInBranch(repo, decodedContent, branchName) {
              await github.repos.createOrUpdateFileContents({
                owner: org,
                repo: repo.name,
                path: 'CODEOWNERS',
                message: 'Created CODEOWNERS',
                content: Buffer.from(decodedContent).toString('base64'),
                branch: branchName,
              });
            }

            async function createPullRequest(repo, branchName, default_branch) {
              await github.pulls.create({
                owner: org,
                repo: repo.name,
                title: `Add CODEOWNERS file to ${repo.name}`,
                head: branchName,
                base: default_branch,
              });
            }

            async function createBranchAndPR(repo, decodedContent) {
              const branchName = `codeowners-feature-${repo.name}`;

              if (await checkExistingPulls(repo, branchName)) {
                console.log(`Pull request already exists for repository ${repo.name}`);
                return;
              }

              const default_branch = await getDefaultBranch(repo);

              await createNewBranch(repo, default_branch, branchName);
              await createFileInBranch(repo, decodedContent, branchName);
              await createPullRequest(repo, branchName, default_branch);
            }

            const sourceContent = await fetchContent('CODEOWNERS');
            const settingsContent = await fetchContent('.github/codeowners-settings.yml');

            if (!sourceContent || !settingsContent) {
              return;
            }

            const settings = JSON.parse(settingsContent);

            const repos = await github.paginate(github.repos.listForOrg, {
              org,
              type: 'all',
            });

            for (const repo of repos) {
              if (repo.name !== sourceRepo && settings.include.includes(repo.name) && !settings.exclude.includes(repo.name)) {
                try {
                  await github.repos.getContent({
                    owner: org,
                    repo: repo.name,
                    path: 'CODEOWNERS',
                  });
                } catch (error) {
                  if (error.message.includes('Not Found')) {
                    await createBranchAndPR(repo, sourceContent);
                  }
                }
              }
            }