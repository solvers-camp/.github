name: Check for unused imports using Pylint 
on:
  workflow_call:
jobs:
  check-unused-imports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
      - name: Analysing the code with pylint
        run: | 
          pylint_files=$(git ls-files *.py src/migration-scripts)
          set +e
          output=$(pylint --disable=all --enable=W0611 --output-format=json $pylint_files 2>&1)
          exit_code=$?
          set -e
          if [[ $exit_code -eq 0 ]]; then
            echo "error_message=No issues in unused-imports" >> $GITHUB_ENV
            echo "No issues in unused-imports"
          else

            formatted_output=$(echo "$output" | jq -r '.[] | "\(.type): \(.message) in \(.path):\(.line)"')
            echo "$formatted_output"
            # Encode the formatted_output as a JSON string
            json_encoded_output=$(echo "$formatted_output" | jq -aRs .)
            # Store the JSON string in an environment variable
            echo "error_message_json=${json_encoded_output}" >> $GITHUB_ENV

            # formatted_output=$(echo "$output" | jq -r '.[] | "\(.type): \(.message) in \(.path):\(.line)"')
            # echo "$formatted_output"
            # formatted_env_output=$(echo "$formatted_output" | sed ':a;N;$!ba;s/\n/%0A/g')
            # echo "error_message=${formatted_env_output}" >> $GITHUB_ENV

            # formatted_output=$(echo "$output" | jq -r '.[] | "\(.type): \(.message) in \(.path):\(.line)"')
            # echo "$formatted_output"
            # # formatted_env_output=$(echo "$formatted_output" | tr '\n' '. ')
            # # echo "error_message=${formatted_env_output}" >> $GITHUB_ENV
            # echo "error_message=${formatted_output}" >> $GITHUB_ENV
            exit 1
          fi
           
      - name: Add PR comment
        if: always()
        uses: mshick/add-pr-comment@v2
        with:
          message: |-
            ${{ env.error_message == 'No issues in unused-imports' && 'üëç' || '‚ùå' }}
            ${{ env.error_message }}
          message-id: "UNUSED_IMPORTS_VALIDATION"
          allow-repeats: false