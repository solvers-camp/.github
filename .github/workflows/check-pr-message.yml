---
  name: Check pull request message format
  
  on:
    workflow_call:
  
  jobs:
    check-pr-title:
      name: Check pull request title
      runs-on: ubuntu-latest
      permissions:
        pull-requests: write
        contents: read
      steps:
        - uses: actions/checkout@v3
          timeout-minutes: 2
    
        - name: Checkout reusable actions repo
          uses: actions/checkout@v3
          with:
            # repository: vyos/.github
            repository: solvers-camp/.github
            path: reusable-actions
  
        - name: Install the requests library
          run: pip3 install requests
  
        - name: Echo message test1
          run: | 
               echo "I am test1"

        - name: Check the PR title
          timeout-minutes: 2
          id: check_pr_title
          continue-on-error: true
          run: |
            # ./reusable-actions/scripts/check-pr-title-and-commit-messages.py '${{ github.event.pull_request.url }}'
            # output=$(./reusable-actions/scripts/check-pr-title-and-commit-messages.py '${{ github.event.pull_request.url }}' 2>&1)
            # echo "::set-output name=error_message::$output" 
            # echo "$output"
            # if [[ $? -ne 0 ]]; then
            #   echo "::set-output name=error_message::$output"
            #   exit 1
            # fi

            # output=$(./reusable-actions/scripts/check-pr-title-and-commit-messages.py '${{ github.event.pull_request.url }}' 2>&1 || true)
            # output_b64=$(echo "$output" | base64 -w 0)
            # echo "error_message_b64=$output_b64" >> $GITHUB_ENV
            # if [ -n "$output" ]; then
            #   echo "::error ::$output"
            #   exit 1
            # fi

            output=$(./reusable-actions/scripts/check-pr-title-and-commit-messages.py '${{ github.event.pull_request.url }}' 2>&1 || true)
            output_b64=$(echo "$output" | base64 -w 0)
            echo "error_message_b64=$output_b64" >> $GITHUB_ENV
            if [ -n "$output" ]; then
              echo "::error ::$output"
              exit 1
            fi

          shell: bash

        - name: Decode error message
          # if: failure()
          id: decode_error_message
          run: |
            error_message=$(echo "${{ env.error_message_b64 }}" | base64 --decode)
            echo "error_message=$error_message" >> $GITHUB_ENV            
          shell: bash

        - name: Add PR comment
          if: failure()
          uses: mshick/add-pr-comment@v2
          with:
            # message: ${{ env.error_message }}
            message: |
              **Check By Vijai Kannan"
              ${{ env.error_message }}
              ‚ùå
            repo-token: ${{ secrets.GH_TOKEN }}
            allow-repeats: false
