name: Validate python code using black and ruff

on:
  workflow_call:
    inputs:
      base_ref:
        required: true
        type: string
      head_ref:
        required: true
        type: string

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install black ruff

    - name: Get list of modified Python files
      id: git_diff
      run: |
        BASE_REF=${{ inputs.base_ref }}
        HEAD_REF=${{ inputs.head_ref }}

        echo "Base ref: $BASE_REF"
        echo "Head ref: $HEAD_REF"
        
        if [ -z "$BASE_REF" ] || [ -z "$HEAD_REF" ]; then
          echo "Base and head refs must be specified."
          exit 1
        fi
        
        git fetch origin $BASE_REF --depth=1
        git fetch origin $HEAD_REF --depth=1

        # Check if branches have a common ancestor
        if ! git merge-base --is-ancestor origin/$BASE_REF origin/$HEAD_REF; then
          echo "Branches $BASE_REF and $HEAD_REF do not have a common ancestor."
          # Handle the case where there is no common ancestor
          git diff --name-only origin/$BASE_REF origin/$HEAD_REF -- '*.py' > modified_files.txt
        else
          git diff --name-only origin/$BASE_REF...origin/$HEAD_REF -- '*.py' > modified_files.txt
        fi  

    - name: Check contents of modified_files.txt
      run: |
        echo "Modified files:"
        cat modified_files.txt

    - name: Check formatting and linting
      id: check_formatting_and_linting
      run: |
        if [ -s modified_files.txt ]; then
          black_failed=false
          ruff_failed=false
          error_message=""
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              black_output=$(black --check "$file" 2>&1) || black_failed=true
              ruff_output=$(ruff check "$file" 2>&1) || ruff_failed=true
              if [ "$black_failed" = true ]; then
                error_message="$error_message\nBlack issues in $file:\n$black_output"
              fi
              if [ "$ruff_failed" = true ]; then
                error_message="$error_message\nRuff issues in $file:\n$ruff_output"
              fi
            else
              echo "File $file does not exist."
            fi
          done < modified_files.txt
          if [ "$black_failed" = true ]; then
            echo "black_failed=true" >> $GITHUB_ENV
          fi
          if [ "$ruff_failed" = true ]; then
            echo "ruff_failed=true" >> $GITHUB_ENV
          fi
          # Escape special characters in error_message
          escaped_error_message=$(echo "$error_message" | sed 's/%/%25/g; s/\n/%0A/g; s/\r/%0D/g')
          echo "error_message=$escaped_error_message" >> $GITHUB_ENV
        else
          echo "No Python files modified"
          echo "error_message=No Formatting/Linting issue found in python files." >> $GITHUB_ENV
        fi
        
    - name: Determine result
      id: determine_result
      run: |
        if [ "${{ env.black_failed }}" == "true" ] || [ "${{ env.ruff_failed }}" == "true" ]; then
          echo "no_issues=false" >> $GITHUB_ENV
        else
          echo "no_issues=true" >> $GITHUB_ENV
        fi    

    - name: Add PR comment with results
      if: always()
      uses: mshick/add-pr-comment@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        message: |-
          ${{ env.no_issues == 'true' && 'üëç' || '‚ùå' }}
          ${{ env.error_message }}
        message-id: "FORMATTING_VALIDATION"
        allow-repeats: false