name: Validate python code using black and ruff

on:
  workflow_call:
    inputs:
      base_ref:
        required: true
        type: string
      head_ref:
        required: true
        type: string

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install black ruff

    - name: Get list of modified Python files
      id: git_diff
      run: |
        BASE_REF=${{ inputs.base_ref }}
        HEAD_REF=${{ inputs.head_ref }}

        echo "Base ref: $BASE_REF"
        echo "Head ref: $HEAD_REF"
        
        if [ -z "$BASE_REF" ] || [ -z "$HEAD_REF" ]; then
          echo "Base and head refs must be specified."
          exit 1
        fi
        
        git fetch origin $BASE_REF --depth=1
        git fetch origin $HEAD_REF --depth=1

        # Check if branches have a common ancestor
        if ! git merge-base --is-ancestor origin/$BASE_REF origin/$HEAD_REF; then
          echo "Branches $BASE_REF and $HEAD_REF do not have a common ancestor."
          # Handle the case where there is no common ancestor
          git diff --name-only origin/$BASE_REF origin/$HEAD_REF -- '*.py' > modified_files.txt
        else
          git diff --name-only origin/$BASE_REF...origin/$HEAD_REF -- '*.py' > modified_files.txt
        fi

    - name: Check contents of modified_files.txt
      run: |
        echo "Modified files:"
        cat modified_files.txt

    - name: Check formatting with Black
      id: black_check
      run: |
        if [ -s modified_files.txt ]; then
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              black --check "$file" || true
            else
              echo "File $file does not exist."
            fi
          done < modified_files.txt
        else
          echo "No Python files modified"
        fi

    - name: Lint with Ruff
      id: ruff_check
      run: |
        if [ -s modified_files.txt ]; then
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              ruff check "$file" || true
            else
              echo "File $file does not exist."
            fi
          done < modified_files.txt
        else
          echo "No Python files modified"
        fi

    # - name: Determine result
    #   id: determine_result
    #   run: |
    #     BLACK_OUTPUT="${{ steps.black_check.outputs.stdout }}${{ steps.black_check.outputs.stderr }}"
    #     RUFF_OUTPUT="${{ steps.ruff_check.outputs.stdout }}${{ steps.ruff_check.outputs.stderr }}"

    #     if [ -z "$BLACK_OUTPUT" ] && [ -z "$RUFF_OUTPUT" ]; then
    #       echo "no_issues=true" >> $GITHUB_ENV
    #     else
    #       echo "no_issues=false" >> $GITHUB_ENV
    #     fi

    # - name: Add PR comment with results
    #   uses: mshick/add-pr-comment@v2
    #   with:
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}
    #     message: |
    #       **Check formatting with Black:**
    #       ${{ env.no_issues == 'true' && 'üëç' || '‚ùå' }}

    #       **Lint with Ruff:**
    #       ${{ env.no_issues == 'true' && 'üëç' || '‚ùå' }}    