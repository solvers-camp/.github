name: Validate python code using darker and ruff

on:
  workflow_call:
    inputs:
      base_ref:
        required: true
        type: string
      head_ref:
        required: true
        type: string

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install darker ruff black

    - name: Format with Darker
      continue-on-error: true
      run: |
        BASE_REF=${{ inputs.base_ref }}
        HEAD_REF=${{ inputs.head_ref }}

        echo "Base ref: $BASE_REF"
        echo "Head ref: $HEAD_REF"
        
        if [ -z "$BASE_REF" ] || [ -z "$HEAD_REF" ]; then
          echo "Base and head refs must be specified."
          exit 1
        fi
        
        git fetch origin $BASE_REF:$BASE_REF --depth=1
        git fetch origin $HEAD_REF:$HEAD_REF --depth=1

        # Get the list of modified and newly added Python files
        MODIFIED_FILES=$(git diff --name-only $BASE_REF $HEAD_REF -- '*.py')

        if [ -n "$MODIFIED_FILES" ]; then
          echo "Modified Python files:"
          echo "$MODIFIED_FILES"
          # Format only the modified lines in the Python files and any new Python files
          for file in $MODIFIED_FILES; do
            if [ -f "$file" ]; then
              echo "Formatting $file with Darker"
              darker_output=$(darker --revision $BASE_REF --lint black "$file" 2>&1)
              echo "$darker_output"
              # Check if there are any black formatting errors
              if echo "$darker_output" | grep -q "would reformat"; then
                echo "Black formatting error in file: $file"
              fi
            else
              echo "File $file does not exist."
            fi
          done
        else
          echo "No Python files modified"
        fi

    - name: Lint with Ruff
      continue-on-error: true
      run: |
        BASE_REF=${{ inputs.base_ref }}
        HEAD_REF=${{ inputs.head_ref }}

        git fetch origin $BASE_REF:$BASE_REF --depth=1
        git fetch origin $HEAD_REF:$HEAD_REF --depth=1

        # Get the list of modified and newly added Python files
        MODIFIED_FILES=$(git diff --name-only $BASE_REF $HEAD_REF -- '*.py')

        if [ -n "$MODIFIED_FILES" ]; then
          echo "Modified Python files:"
          echo "$MODIFIED_FILES"
          for file in $MODIFIED_FILES; do
            if [ -f "$file" ]; then
              echo "Linting $file with Ruff"
              ruff_output=$(ruff check "$file" 2>&1)
              echo "$ruff_output"
            else
              echo "File $file does not exist."
            fi
          done
        else
          echo "No Python files modified"
        fi