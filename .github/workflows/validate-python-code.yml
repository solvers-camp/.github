name: Validate python code using black and ruff

on:
  workflow_call:

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install black ruff

    - name: Get list of modified Python files
      id: git_diff
      run: |
        BASE_REF=${{ github.event.pull_request.base.ref }}
        HEAD_REF=${{ github.event.pull_request.head.ref }}
        
        if [ -z "$BASE_REF" ] || [ -z "$HEAD_REF" ]; then
          echo "Base and head refs must be specified."
          exit 1
        fi
        
        git fetch origin $BASE_REF --depth=1
        git fetch origin $HEAD_REF --depth=1

        # Check if branches have a common ancestor
        if ! git merge-base --is-ancestor origin/$BASE_REF origin/$HEAD_REF; then
          echo "Branches $BASE_REF and $HEAD_REF do not have a common ancestor."
          # Handle the case where there is no common ancestor
          git diff --name-only origin/$BASE_REF origin/$HEAD_REF -- '*.py' > modified_files.txt
        else
          git diff --name-only origin/$BASE_REF...origin/$HEAD_REF -- '*.py' > modified_files.txt
        fi

    - name: Check contents of modified_files.txt
      run: |
        echo "Modified files:"
        cat modified_files.txt

    # - name: Check current directory
    #   run: |
    #     echo "Current directory:"
    #     pwd
    #     echo "Files in current directory:"
    #     ls -la

    - name: Lint with Ruff
      run: |
        if [ -s modified_files.txt ]; then
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              ruff check "$file"
            else
              echo "File $file does not exist."
            fi
          done < modified_files.txt
        else
          echo "No Python files modified"
        fi    

    - name: Check formatting with Black
      run: |
        if [ -s modified_files.txt ]; then
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              black --check "$file"
            else
              echo "File $file does not exist."
            fi
          done < modified_files.txt
        else
          echo "No Python files modified"
        fi

    # - name: Lint with Ruff
    #   run: |
    #     if [ -s modified_files.txt ]; then
    #       while IFS= read -r file; do
    #         if [ -f "$file" ]; then
    #           ruff check "$file"
    #         else
    #           echo "File $file does not exist."
    #         fi
    #       done < modified_files.txt
    #     else
    #       echo "No Python files modified"
    #     fi